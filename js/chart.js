// // Generated by CoffeeScript 1.4.0
//
// /*
// Easy pie chart is a jquery plugin to display simple animated pie charts for only one value
//
// Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
// and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
//
// Built on top of the jQuery library (http://jquery.com)
//
// @source: http://github.com/rendro/easy-pie-chart/
// @autor: Robert Fleischmann
// @version: 1.0.1
//
// Inspired by: http://dribbble.com/shots/631074-Simple-Pie-Charts-II?list=popular&offset=210
// Thanks to Philip Thrasher for the jquery plugin boilerplate for coffee script
// */
//
//
// (function() {
//
//   (function($) {
//     $.easyPieChart = function(el, options) {
//       var addScaleLine, animateLine, drawLine, easeInOutQuad, renderBackground, renderScale, renderTrack,
//         _this = this;
//       this.el = el;
//       this.$el = $(el);
//       this.$el.data("easyPieChart", this);
//       this.init = function() {
//         var percent;
//         _this.options = $.extend({}, $.easyPieChart.defaultOptions, options);
//         percent = parseInt(_this.$el.data('percent'), 10);
//         _this.percentage = 0;
//         _this.canvas = $("<canvas width='" + _this.options.size + "' height='" + _this.options.size + "'></canvas>").get(0);
//         _this.$el.append(_this.canvas);
//         if (typeof G_vmlCanvasManager !== "undefined" && G_vmlCanvasManager !== null) {
//           G_vmlCanvasManager.initElement(_this.canvas);
//         }
//         _this.ctx = _this.canvas.getContext('2d');
//         if (window.devicePixelRatio > 1.5) {
//           $(_this.canvas).css({
//             width: _this.options.size,
//             height: _this.options.size
//           });
//           _this.canvas.width *= 2;
//           _this.canvas.height *= 2;
//           _this.ctx.scale(2, 2);
//         }
//         _this.ctx.translate(_this.options.size / 2, _this.options.size / 2);
//         _this.$el.addClass('easyPieChart');
//         _this.$el.css({
//           width: _this.options.size,
//           height: _this.options.size,
//           lineHeight: "" + _this.options.size + "px"
//         });
//         _this.update(percent);
//         return _this;
//       };
//       this.update = function(percent) {
//         if (_this.options.animate === false) {
//           return drawLine(percent);
//         } else {
//           return animateLine(_this.percentage, percent);
//         }
//       };
//       renderScale = function() {
//         var i, _i, _results;
//         _this.ctx.fillStyle = _this.options.scaleColor;
//         _this.ctx.lineWidth = 1;
//         _results = [];
//         for (i = _i = 0; _i <= 24; i = ++_i) {
//           _results.push(addScaleLine(i));
//         }
//         return _results;
//       };
//       addScaleLine = function(i) {
//         var offset;
//         offset = i % 6 === 0 ? 0 : _this.options.size * 0.017;
//         _this.ctx.save();
//         _this.ctx.rotate(i * Math.PI / 12);
//         _this.ctx.fillRect(_this.options.size / 2 - offset, 0, -_this.options.size * 0.05 + offset, 1);
//         return _this.ctx.restore();
//       };
//       renderTrack = function() {
//         var offset;
//         offset = _this.options.size / 2 - _this.options.lineWidth / 2;
//         if (_this.options.scaleColor !== false) {
//           offset -= _this.options.size * 0.08;
//         }
//         _this.ctx.beginPath();
//         _this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
//         _this.ctx.closePath();
//         _this.ctx.strokeStyle = _this.options.trackColor;
//         _this.ctx.lineWidth = _this.options.lineWidth;
//         return _this.ctx.stroke();
//       };
//       renderBackground = function() {
//         if (_this.options.scaleColor !== false) {
//           renderScale();
//         }
//         if (_this.options.trackColor !== false) {
//           return renderTrack();
//         }
//       };
//       drawLine = function(percent) {
//         var offset;
//         renderBackground();
//         _this.ctx.strokeStyle = $.isFunction(_this.options.barColor) ? _this.options.barColor(percent) : _this.options.barColor;
//         _this.ctx.lineCap = _this.options.lineCap;
//         _this.ctx.lineWidth = _this.options.lineWidth;
//         offset = _this.options.size / 2 - _this.options.lineWidth / 2;
//         if (_this.options.scaleColor !== false) {
//           offset -= _this.options.size * 0.08;
//         }
//         _this.ctx.save();
//         _this.ctx.rotate(-Math.PI / 2);
//         _this.ctx.beginPath();
//         _this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
//         _this.ctx.stroke();
//         return _this.ctx.restore();
//       };
//       animateLine = function(from, to) {
//         var currentStep, fps, steps;
//         fps = 30;
//         steps = fps * _this.options.animate / 1000;
//         currentStep = 0;
//         _this.options.onStart.call(_this);
//         _this.percentage = to;
//         if (_this.animation) {
//           clearInterval(_this.animation);
//           _this.animation = false;
//         }
//         return _this.animation = setInterval(function() {
//           _this.ctx.clearRect(-_this.options.size / 2, -_this.options.size / 2, _this.options.size, _this.options.size);
//           renderBackground.call(_this);
//           drawLine.call(_this, [easeInOutQuad(currentStep, from, to - from, steps)]);
//           currentStep++;
//           if ((currentStep / steps) > 1) {
//             clearInterval(_this.animation);
//             _this.animation = false;
//             return _this.options.onStop.call(_this);
//           }
//         }, 1000 / fps);
//       };
//       easeInOutQuad = function(t, b, c, d) {
//         var easeIn, easing;
//         easeIn = function(t) {
//           return Math.pow(t, 2);
//         };
//         easing = function(t) {
//           if (t < 1) {
//             return easeIn(t);
//           } else {
//             return 2 - easeIn((t / 2) * -2 + 2);
//           }
//         };
//         t /= d / 2;
//         return c / 2 * easing(t) + b;
//       };
//       return this.init();
//     };
//     $.easyPieChart.defaultOptions = {
//       barColor: '#ef1e25',
//       trackColor: '#f2f2f2',
//       scaleColor: '#dfe0e0',
//       lineCap: 'round',
//       // size: 50,
//       lineWidth: 3,
//       animate: false,
//       onStart: $.noop,
//       onStop: $.noop
//     };
//     $.fn.easyPieChart = function(options) {
//       return $.each(this, function(i, el) {
//         var $el;
//         $el = $(el);
//         if (!$el.data('easyPieChart')) {
//           return $el.data('easyPieChart', new $.easyPieChart(el, options));
//         }
//       });
//     };
//     return void 0;
//   })(jQuery);
//
// }).call(this);


! function() {
  var a = function(a, b) {
      var c = document.createElement("canvas");
      "undefined" != typeof G_vmlCanvasManager && G_vmlCanvasManager.initElement(c);
      var d = c.getContext("2d");
      if (c.width = c.height = b.size, a.appendChild(c), window.devicePixelRatio > 1) {
        var e = window.devicePixelRatio;
        c.style.width = c.style.height = [b.size, "px"].join(""), c.width = c.height = b.size * e, d.scale(e, e)
      }
      d.translate(b.size / 2, b.size / 2), d.rotate((-0.5 + b.rotate / 180) * Math.PI);
      var f = (b.size - b.lineWidth) / 2;
      b.scaleColor && b.scaleLength && (f -= b.scaleLength + 2);
      var g = function(a, b, c) {
          c = Math.min(Math.max(0, c || 1), 1), d.beginPath(), d.arc(0, 0, f, 0, 2 * Math.PI * c, !1), d.strokeStyle = a, d.lineWidth = b, d.stroke()
        },
        h = function() {
          var a, c, e = 24;
          d.lineWidth = 1, d.fillStyle = b.scaleColor, d.save();
          for (var e = 24; e >= 0; --e) 0 === e % 6 ? (c = b.scaleLength, a = 0) : (c = .6 * b.scaleLength, a = b.scaleLength - c), d.fillRect(-b.size / 2 + a, 0, c, 1), d.rotate(Math.PI / 12);
          d.restore()
        };
      Date.now = Date.now || function() {
        return +new Date
      };
      var i = function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(a) {
          window.setTimeout(a, 1e3 / 60)
        }
      }();
      this.clear = function() {
        d.clearRect(b.size / -2, b.size / -2, b.size, b.size)
      }, this.draw = function(a) {
        this.clear(), b.scaleColor && h(), b.trackColor && g(b.trackColor, b.lineWidth), d.lineCap = b.lineCap;
        var c;
        c = "function" == typeof b.barColor ? b.barColor(a) : b.barColor, a > 0 && g(c, b.lineWidth, a / 100)
      }.bind(this), this.animate = function(a, c) {
        var d = Date.now();
        b.onStart(a, c);
        var e = function() {
          var f = Math.min(Date.now() - d, b.animate),
            g = b.easing(this, f, a, c - a, b.animate);
          this.draw(g), b.onStep(a, c, g), f >= b.animate ? b.onStop(a, c) : i(e)
        }.bind(this);
        i(e)
      }.bind(this)
    },
    b = function(b, c) {
      var d, e = {
          barColor: "#ef1e25",
          trackColor: "#f9f9f9",
          scaleColor: "#dfe0e0",
          scaleLength: 5,
          lineCap: "round",
          lineWidth: 3,
          size: 110,
          rotate: 0,
          animate: 1e3,
          renderer: a,
          easing: function(a, b, c, d, e) {
            return (b /= e / 2) < 1 ? d / 2 * b * b + c : -d / 2 * (--b * (b - 2) - 1) + c
          },
          onStart: function() {},
          onStep: function() {},
          onStop: function() {}
        },
        f = {},
        g = 0,
        h = function() {
          this.el = b, this.options = f;
          for (var a in e) e.hasOwnProperty(a) && (f[a] = c && "undefined" != typeof c[a] ? c[a] : e[a], "function" == typeof f[a] && (f[a] = f[a].bind(this)));
          f.easing = "string" == typeof f.easing && "undefined" != typeof jQuery && jQuery.isFunction(jQuery.easing[f.easing]) ? jQuery.easing[f.easing] : e.easing, d = new f.renderer(b, f), d.draw(g), b.dataset && b.dataset.percent && this.update(parseInt(b.dataset.percent, 10))
        }.bind(this);
      this.update = function(a) {
        return a = parseInt(a, 10), f.animate ? d.animate(g, a) : d.draw(a), g = a, this
      }.bind(this), h()
    };
  window.EasyPieChart = b
}();